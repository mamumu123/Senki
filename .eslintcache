[{"/Users/linma/try/Senki/src/index.tsx":"1","/Users/linma/try/Senki/src/app/index.tsx":"2","/Users/linma/try/Senki/src/app/routes.ts":"3","/Users/linma/try/Senki/src/layout/index.ts":"4","/Users/linma/try/Senki/src/pages/index.ts":"5","/Users/linma/try/Senki/src/layout/Header/index.tsx":"6","/Users/linma/try/Senki/src/layout/Footer/index.tsx":"7","/Users/linma/try/Senki/src/pages/SimulateDetail/index.ts":"8","/Users/linma/try/Senki/src/pages/VisualEditor/index.tsx":"9","/Users/linma/try/Senki/src/pages/Welcome/index.tsx":"10","/Users/linma/try/Senki/src/pages/AlgoSimulate/index.tsx":"11","/Users/linma/try/Senki/src/pages/NotFound/index.tsx":"12","/Users/linma/try/Senki/src/lib/babel/plugin-senki-wait.js":"13","/Users/linma/try/Senki/src/util/index.ts":"14","/Users/linma/try/Senki/src/pages/AlgoSimulate/AlgoBox.tsx":"15","/Users/linma/try/Senki/src/lib/senki/index.js":"16","/Users/linma/try/Senki/src/util/date.ts":"17","/Users/linma/try/Senki/src/pages/SimulateDetail/Tree/index.tsx":"18","/Users/linma/try/Senki/src/pages/SimulateDetail/Sort/index.tsx":"19","/Users/linma/try/Senki/src/components/index.ts":"20","/Users/linma/try/Senki/src/lib/algo_desc/index.ts":"21","/Users/linma/try/Senki/src/components/NormalStyle.ts":"22","/Users/linma/try/Senki/src/lib/algo_desc/CodeControl.ts":"23","/Users/linma/try/Senki/src/lib/algo_desc/tree/redBlackTree.ts":"24","/Users/linma/try/Senki/src/lib/algo_desc/tree/minBinaryHeap.ts":"25","/Users/linma/try/Senki/src/lib/algo_desc/tree/inorderTraversal.ts":"26","/Users/linma/try/Senki/src/pages/SimulateDetail/BreadcrumbNav.tsx":"27","/Users/linma/try/Senki/src/lib/algo_desc/sort/shell.ts":"28","/Users/linma/try/Senki/src/lib/algo_desc/sort/merge.ts":"29","/Users/linma/try/Senki/src/lib/algo_desc/sort/selection.ts":"30","/Users/linma/try/Senki/src/lib/algo_desc/sort/quick.ts":"31","/Users/linma/try/Senki/src/lib/algo_desc/sort/bubble.ts":"32","/Users/linma/try/Senki/src/components/ControlTrack.tsx":"33","/Users/linma/try/Senki/src/pages/SimulateDetail/CodeDesc.tsx":"34","/Users/linma/try/Senki/src/lib/algo_desc/makeAlgoSource.ts":"35","/Users/linma/try/Senki/src/lib/senki/structure/SenkiLinkedNode.js":"36","/Users/linma/try/Senki/src/lib/senki/base/object.js":"37","/Users/linma/try/Senki/src/lib/senki/structure/SenkiArray.js":"38","/Users/linma/try/Senki/src/lib/senki/base/anim.js":"39","/Users/linma/try/Senki/src/lib/senki/base/scheduler.js":"40","/Users/linma/try/Senki/src/lib/senki/components/Histogram.js":"41","/Users/linma/try/Senki/src/lib/senki/components/ForestPlot.js":"42","/Users/linma/try/Senki/src/lib/senki/base/shape.js":"43","/Users/linma/try/Senki/src/lib/senki/base/util.js":"44","/Users/linma/try/Senki/src/pages/SimulateDetail/Top/index.tsx":"45","/Users/linma/try/Senki/src/lib/algo_desc/link/reverse.ts":"46"},{"size":197,"mtime":1679712370370,"results":"47","hashOfConfig":"48"},{"size":885,"mtime":1679712370369,"results":"49","hashOfConfig":"48"},{"size":917,"mtime":1683776597040,"results":"50","hashOfConfig":"48"},{"size":92,"mtime":1679712370371,"results":"51","hashOfConfig":"48"},{"size":276,"mtime":1679712370384,"results":"52","hashOfConfig":"48"},{"size":3402,"mtime":1679712370371,"results":"53","hashOfConfig":"48"},{"size":486,"mtime":1679712370371,"results":"54","hashOfConfig":"48"},{"size":226,"mtime":1683776592358,"results":"55","hashOfConfig":"48"},{"size":11704,"mtime":1679712370383,"results":"56","hashOfConfig":"48"},{"size":2665,"mtime":1679712370384,"results":"57","hashOfConfig":"48"},{"size":2682,"mtime":1683775268990,"results":"58","hashOfConfig":"48"},{"size":1132,"mtime":1679712370381,"results":"59","hashOfConfig":"48"},{"size":3366,"mtime":1679712370375,"results":"60","hashOfConfig":"48"},{"size":194,"mtime":1679712370385,"results":"61","hashOfConfig":"48"},{"size":2720,"mtime":1679712370381,"results":"62","hashOfConfig":"48"},{"size":374,"mtime":1679712370379,"results":"63","hashOfConfig":"48"},{"size":2206,"mtime":1679712370385,"results":"64","hashOfConfig":"48"},{"size":6555,"mtime":1679712370383,"results":"65","hashOfConfig":"48"},{"size":6750,"mtime":1683369558870,"results":"66","hashOfConfig":"48"},{"size":118,"mtime":1679712370370,"results":"67","hashOfConfig":"48"},{"size":733,"mtime":1683776725039,"results":"68","hashOfConfig":"48"},{"size":304,"mtime":1679712370370,"results":"69","hashOfConfig":"48"},{"size":2931,"mtime":1679712370372,"results":"70","hashOfConfig":"48"},{"size":8915,"mtime":1679712370374,"results":"71","hashOfConfig":"48"},{"size":5257,"mtime":1679712370374,"results":"72","hashOfConfig":"48"},{"size":3964,"mtime":1679712370374,"results":"73","hashOfConfig":"48"},{"size":791,"mtime":1679712370382,"results":"74","hashOfConfig":"48"},{"size":2245,"mtime":1679712370373,"results":"75","hashOfConfig":"48"},{"size":2426,"mtime":1679712370373,"results":"76","hashOfConfig":"48"},{"size":1589,"mtime":1679712370373,"results":"77","hashOfConfig":"48"},{"size":2639,"mtime":1679712370373,"results":"78","hashOfConfig":"48"},{"size":1422,"mtime":1683538663347,"results":"79","hashOfConfig":"48"},{"size":2678,"mtime":1679712370370,"results":"80","hashOfConfig":"48"},{"size":1979,"mtime":1679712370382,"results":"81","hashOfConfig":"48"},{"size":257,"mtime":1679712370372,"results":"82","hashOfConfig":"48"},{"size":4560,"mtime":1683732962454,"results":"83","hashOfConfig":"48"},{"size":2978,"mtime":1679712370376,"results":"84","hashOfConfig":"48"},{"size":3527,"mtime":1683446494391,"results":"85","hashOfConfig":"48"},{"size":4451,"mtime":1683471599679,"results":"86","hashOfConfig":"48"},{"size":800,"mtime":1683445048008,"results":"87","hashOfConfig":"48"},{"size":9476,"mtime":1683538641411,"results":"88","hashOfConfig":"48"},{"size":9722,"mtime":1683884808100,"results":"89","hashOfConfig":"48"},{"size":4630,"mtime":1683685279159,"results":"90","hashOfConfig":"48"},{"size":923,"mtime":1679712370377,"results":"91","hashOfConfig":"48"},{"size":6832,"mtime":1683885970851,"results":"92","hashOfConfig":"48"},{"size":2266,"mtime":1683887004280,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"ykjsza",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/linma/try/Senki/src/index.tsx",[],["193","194"],"/Users/linma/try/Senki/src/app/index.tsx",[],"/Users/linma/try/Senki/src/app/routes.ts",[],"/Users/linma/try/Senki/src/layout/index.ts",[],"/Users/linma/try/Senki/src/pages/index.ts",[],"/Users/linma/try/Senki/src/layout/Header/index.tsx",[],"/Users/linma/try/Senki/src/layout/Footer/index.tsx",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/index.ts",[],"/Users/linma/try/Senki/src/pages/VisualEditor/index.tsx",["195"],"import {\n  makeStyles,\n  Button,\n  FormControlLabel,\n  Switch,\n  Snackbar,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { Drawer, Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/theme/eclipse.css\";\nimport \"codemirror/theme/neo.css\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { ControlTrack, useNormalStyles } from \"../../components\";\nimport { CodeContext, CodeControl } from \"../../lib/algo_desc\";\nimport pulgin from \"../../lib/babel/plugin-senki-wait\";\nimport { Scene, SenkiArray, SenkiLinkedNode } from \"../../lib/senki\";\nimport { C } from \"../../util\";\n\nlet scene: Scene;\nlet codeControl: CodeControl;\nlet tempTask: undefined | (() => void); // 保存断点继续的执行函数\n\nconst clearTempTask = () => (tempTask = undefined);\n\nconst Mode = [\n  {\n    title: \"数组\",\n    className: \"SenkiArray\",\n    header: 'import { SenkiArray } from \"senki\"\\n\\n',\n  },\n  {\n    title: \"树节点\",\n    className: \"SenkiLinkedNode\",\n    header: 'import { SenkiLinkedNode } from \"senki\"\\n\\n',\n  },\n];\n\nlet histroyCodeStr = localStorage.getItem(\"code\");\n\nconst histroyCode: string[] = histroyCodeStr\n  ? JSON.parse(histroyCodeStr)\n  : Mode.map((m) => m.header);\n\nfunction VisualEditor() {\n  const classes = useStyles();\n  const { flexRow } = useNormalStyles();\n\n  const [tip, setTip] = useState(\"\");\n  const [codeInfo, setCodeInfo] = useState([-1, -1]);\n  const [error, setError] = useState<string>();\n  const [mode, setMode] = useState(0);\n  const [format, setFormat] = useState(true);\n  const [code, setCode] = useState(histroyCode);\n  const [snackbar, setSnackbar] = useState(false);\n  const [status, setStatus] = useState<\"stop\" | \"play\" | \"finish\">(\"stop\");\n\n  const editor = useRef<CodeMirror>(null);\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const statusRef = useRef(status);\n  statusRef.current = status; // 没办法，为了在函数里引用，只能干这种愚蠢操作。\n  const codeInfoRef = useRef<number[]>();\n  codeInfoRef.current = codeInfo;\n\n  const handleBeforeChange = (_: any, change: any) => {\n    if (change.origin === \"setValue\") return;\n    if (change.from.line === 0 || change.from.line === 1) {\n      change.cancel();\n    }\n  };\n\n  const handleChangeMode = (e: RadioChangeEvent) => {\n    code[mode] = editor.current?.editor.getValue();\n    setMode(e.target.value);\n    clearTempTask();\n    setStatus(\"stop\");\n  };\n\n  const handlePublishCode = () => {\n    setSnackbar(true);\n  };\n\n  const handleSeveCode = () => {\n    code[mode] = editor.current?.editor.getValue();\n    localStorage.setItem(\"code\", JSON.stringify(code));\n    setTip(\"保存成功\");\n  };\n\n  const handleRunCode = () => {\n    code[mode] = editor.current?.editor.getValue();\n    localStorage.setItem(\"code\", JSON.stringify(code));\n\n    let { fakeCode, error, realCode } = makeCodeSource(code[mode], format);\n\n    createNewCodeControl(realCode, statusRef, setStatus, setError, setCodeInfo);\n\n    if (error) return setError(error);\n\n    if (format) {\n      code[mode] = Mode[mode].header + fakeCode;\n      editor.current?.editor.setValue(code[mode]);\n      localStorage.setItem(\"code\", JSON.stringify(code));\n    }\n\n    setStatus(\"play\");\n  };\n\n  const handlePlay = () => {\n    if (!codeControl || codeControl.status !== \"running\")\n      return setTip(\"请先运行代码！\");\n    if (tempTask) tempTask();\n    setStatus(\"play\");\n  };\n\n  const handleRestart = () => {\n    codeControl.destroy(); // 一定要记得销毁\n\n    let { error, realCode } = makeCodeSource(code[mode], format);\n\n    createNewCodeControl(realCode, statusRef, setStatus, setError, setCodeInfo);\n\n    if (error) return setError(error);\n\n    setStatus(\"play\");\n  };\n\n  const handleStop = () => {\n    setStatus(\"stop\");\n  };\n\n  const handleNext = () => {\n    if (tempTask) tempTask();\n  };\n\n  const handleChangeSpeed = () => {};\n\n  useLayoutEffect(() => {\n    scene = new Scene(canvas.current!);\n    SenkiArray.config.scene = scene;\n    SenkiArray.config.width = scene.width;\n    SenkiArray.config.height = scene.height;\n    SenkiLinkedNode.setCanvasDimensions({\n      width: scene.width,\n      height: scene.height,\n    });\n    scene.add(SenkiLinkedNode.senkiForest);\n  }, [canvas]);\n\n  return (\n    <div>\n      <Snackbar\n        autoHideDuration={2000}\n        onClose={() => setSnackbar(false)}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n        open={snackbar}\n        message=\"功能建设中...\"\n      />\n      <Snackbar open={!!tip} autoHideDuration={6000} onClose={() => setTip(\"\")}>\n        <Alert severity=\"info\">{tip}</Alert>\n      </Snackbar>\n      <div className={C(flexRow, classes.control)}>\n        <div className={flexRow}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handlePublishCode}\n          >\n            发布代码\n          </Button>\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleSeveCode}>\n            保存代码\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleRunCode}>\n            执行代码\n          </Button>\n        </div>\n        <div className={flexRow}>\n          <ControlTrack\n            status={status}\n            speed={400}\n            light\n            onPlay={handlePlay}\n            onStop={handleStop}\n            onRestart={handleRestart}\n            onChangeSpeed={handleChangeSpeed}\n            onNext={handleNext}\n          />\n        </div>\n      </div>\n      <div className={classes.codeAndCanvasContainer}>\n        <div className={classes.codeEditor}>\n          <div className={classes.bar}>\n            <span className={classes.typeTitle}>\n              语言: <span className={classes.type}>JavaScript</span>\n            </span>\n            <FormControlLabel\n              onChange={(_, v) => setFormat(v)}\n              control={<Switch defaultChecked color=\"primary\" />}\n              label=\"保存时自动格式化代码\"\n              labelPlacement=\"end\"\n            />\n          </div>\n          <div className={classes.code}>\n            <CodeMirror\n              ref={editor}\n              value={code[mode]}\n              onBeforeChange={handleBeforeChange}\n              onRenderLine={(it: CodeMirror, line: any, ele: HTMLElement) => {\n                let no = line.lineNo();\n                let info = codeInfoRef.current;\n                if (info![0] === -1) return;\n                if (no >= info![0] + 1 && no <= info![1] + 1) {\n                  ele.style.backgroundColor = \"#ff000055\";\n                }\n              }}\n              options={{\n                theme: \"neo\",\n                keyMap: \"sublime\",\n                mode: \"js\",\n                matchBrackets: true,\n              }}\n            />\n            <Drawer\n              title={\n                <span style={{ color: \"#f44336\" }}>\n                  出错啦！请确认代码无误！\n                </span>\n              }\n              placement=\"bottom\"\n              closable\n              visible={!!error}\n              mask={false}\n              getContainer={false}\n              onClose={() => setError(\"\")}\n              style={{ position: \"absolute\" }}\n            >\n              <pre>{error?.toString()}</pre>\n            </Drawer>\n          </div>\n        </div>\n        <div className={classes.codeCanvas}>\n          <div className={classes.ani}>\n            <Radio.Group\n              value={mode}\n              buttonStyle=\"outline\"\n              onChange={handleChangeMode}\n            >\n              {Mode.map((m, idx) => (\n                <Radio.Button key={idx} value={idx}>\n                  {m.title}\n                </Radio.Button>\n              ))}\n            </Radio.Group>\n            <span className={classes.state}>\n              {status === \"stop\"\n                ? \"暂无正在执行的代码\"\n                : status === \"play\"\n                ? \"正在执行动画\"\n                : \"代码执行结束\"}\n            </span>\n          </div>\n          <canvas ref={canvas} className={classes.canvasProp}></canvas>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VisualEditor;\n\nfunction makeCodeSource(code: string, format: boolean) {\n  code = code.split(\"\\n\").slice(2).join(\"\\n\").trim();\n  let error = \"\",\n    fakeCode = code,\n    realCode = \"\";\n\n  try {\n    if (format) fakeCode = Babel.transform(code, {}).code;\n\n    realCode = Babel.transform(fakeCode, {\n      plugins: [pulgin],\n    }).code;\n  } catch (err) {\n    error = err;\n  }\n\n  return { fakeCode, error, realCode };\n}\n\nconst createNewCodeControl = (\n  realCode: string,\n  statusRef: React.MutableRefObject<\"stop\" | \"play\" | \"finish\">,\n  setStatus: (bool: \"stop\" | \"play\" | \"finish\") => void,\n  setError: React.Dispatch<React.SetStateAction<string | undefined>>,\n  setCodeInfo: React.Dispatch<React.SetStateAction<number[]>>\n) => {\n  if (codeControl) codeControl.destroy();\n\n  codeControl = new CodeControl(realCode);\n\n  const handleWait = ({ info, resolve }: CodeContext) => {\n    setCodeInfo(info.line);\n    // 确定动画结束了再进行下一步\n    const tryToNext = () => {\n      if (statusRef.current === \"play\") {\n        if (scene.isAnimAllOver()) resolve();\n        else setTimeout(tryToNext, 100);\n      } else tempTask = resolve;\n    };\n\n    setTimeout(tryToNext, 500);\n  };\n\n  const handleEnd = () => {\n    setStatus(\"finish\");\n    setCodeInfo([-1, -1]);\n  };\n\n  const handleDestroy = () => {\n    scene.removeAllChild();\n    SenkiLinkedNode.senkiForest.destroyTree();\n    SenkiLinkedNode.resetSenkiForest();\n    scene.add(SenkiLinkedNode.senkiForest);\n  };\n\n  const handleError = (err: string) => {\n    setError(err);\n  };\n\n  codeControl.on(\"wait\", handleWait);\n  codeControl.on(\"end\", handleEnd);\n  codeControl.on(\"destroy\", handleDestroy);\n  codeControl.on(\"error\", handleError);\n\n  codeControl.start();\n};\n\nconst useStyles = makeStyles({\n  dataFuntion: {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n  },\n  modeFunction: {},\n  codeAndCanvasContainer: {\n    boxSizing: \"border-box\",\n    height: \"75vh\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  codeEditor: {\n    position: \"relative\",\n    boxSizing: \"border-box\",\n    width: \"50vw\",\n    height: \"100%\",\n    background: \"#eeeeee55\",\n    borderTop: \"1px solid #eeeeee\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n  },\n  codeCanvas: {\n    position: \"relative\",\n    boxSizing: \"border-box\",\n    width: \"50vw\",\n    height: \"100%\",\n    background: \"#eeeeee55\",\n    borderTop: \"1px solid #eeeeee\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n  },\n  canvasProp: {\n    flex: 1,\n    background: \"white\",\n    width: \"100%\",\n    margin: \"0px 10px 10px 10px\",\n    borderRadius: \"5px\",\n  },\n  ani: {\n    fontSize: \"1rem\",\n    height: \"40px\",\n    color: \"#aeb4b7\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"90%\",\n  },\n  control: {\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"10px 0px 10px 0px\",\n    \"& > div\": {\n      flex: 1,\n      marginLeft: 50,\n      marginRight: 50,\n    },\n  },\n  bar: {\n    padding: \"5px\",\n    height: \"40px\",\n    color: \"#aeb4b7\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"90%\",\n    fontSize: \"1rem\",\n  },\n  typeTitle: {},\n  state: {},\n  type: {},\n  code: {\n    height: \"100%\",\n    padding: \"0px 10px 10px 10px\",\n    width: \"100%\",\n  },\n});\n","/Users/linma/try/Senki/src/pages/Welcome/index.tsx",[],"/Users/linma/try/Senki/src/pages/AlgoSimulate/index.tsx",[],"/Users/linma/try/Senki/src/pages/NotFound/index.tsx",["196"],"import { makeStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NotFound() {\n  const c = useStyle();\n  return (\n    <div className={c.content}>\n      <img\n        src=\"https://img.alicdn.com/tfs/TB1txw7bNrI8KJjy0FpXXb5hVXa-260-260.png\"\n        className={c.img}\n        alt=\"not found\"\n      />\n      <div>\n        <h3>抱歉，你访问的路径不存在</h3>\n        <p className={c.p}>\n          您要找的页面没有找到，请返回\n          <Link to=\"/\">\n            <a className={c.a}>首页</a>\n          </Link>\n          继续浏览\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default NotFound;\n\nconst useStyle = makeStyles({\n  content: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    minHeight: 500,\n    alignItems: \"center\",\n  },\n  img: {\n    marginRight: 50,\n  },\n  p: {\n    color: \"#666\",\n    fontSize: 16,\n    lineHeight: 20,\n    marginBottom: 7,\n  },\n  a: {\n    fontSize: 16,\n    lineHeight: 20,\n    \"&:-webkit-any-link\": {\n      color: \"-webkit-link\",\n      cursor: \"pointer\",\n      textDecoration: \"underline\",\n    },\n  },\n});\n","/Users/linma/try/Senki/src/lib/babel/plugin-senki-wait.js",["197"],"export default function ({ types: t }) {\n  const findLine = (path, node) => {\n    if (node && node.loc) return [node.loc.start.line, node.loc.end.line];\n\n    if (!path) return -1;\n\n    if (path.node.loc)\n      return [path.node.loc.start.line, path.node.loc.end.line];\n    else return findLine(path.parentPath);\n  };\n\n  const createWaitNode = ([lineStart = -1, lineEnd = -1], descNum = -1) => {\n    return t.awaitExpression(\n      t.callExpression(t.identifier(\"wait\"), [\n        t.objectExpression([\n          t.objectProperty(\n            t.identifier(\"line\"),\n            t.arrayExpression([\n              t.numericLiteral(lineStart),\n              t.numericLiteral(lineEnd),\n            ])\n          ),\n          t.objectProperty(t.identifier(\"desc\"), t.numericLiteral(descNum)),\n        ]),\n      ])\n    );\n  };\n\n  return {\n    name: \"senki-wait\",\n    visitor: {\n      Program(path) {\n        let len = path.node.body.length;\n        for (let i = 0; i < len; i++) {\n          path.node.body.splice(\n            i * 2 + 1,\n            0,\n            createWaitNode(findLine(path, path.node.body[i * 2]))\n          );\n        }\n      },\n      ArrowFunctionExpression(path) {\n        if (t.isExpression(path.node.body)) {\n          path\n            .get(\"body\")\n            .replaceWith(t.blockStatement([t.returnStatement(path.node.body)]));\n        }\n      },\n      Statement(path) {\n        if (t.isBlockStatement(path.node)) return;\n        if (t.isBreakStatement(path.node)) return;\n\n        const parentNode = path.parentPath.node;\n\n        if (t.isWithStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isIfStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isWhileStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isDoWhileStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isForStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isForInStatement(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n\n        if (t.isSwitchCase(parentNode)) {\n          path.replaceWith(t.blockStatement([path.node]));\n        }\n      },\n      BlockStatement(path) {\n        if (path.parentPath.node.kind === \"constructor\") return;\n        let len = path.node.body.length;\n        for (let i = 0; i < len; i++) {\n          path.node.body.splice(\n            i * 2,\n            0,\n            createWaitNode(findLine(path, path.node.body[i * 2 - 1]))\n          );\n        }\n        if (!t.isReturnStatement(path.node.body[len * 2 - 1]))\n          path.node.body.splice(\n            len * 2,\n            0,\n            createWaitNode(findLine(path, path.node.body[len * 2 - 1]))\n          );\n      },\n      Function(path) {\n        if (path.node.kind === \"constructor\") return;\n        path.node.async = true;\n      },\n      CallExpression(path) {\n        let parent = path.parentPath;\n        while (parent) {\n          if (parent.node.kind === \"constructor\") return;\n          parent = parent.parentPath;\n        }\n        if (!t.isAwaitExpression(path.parentPath.node))\n          path.replaceWith(t.awaitExpression(path.node))\n      }\n    },\n  };\n};\n",["198","199"],"/Users/linma/try/Senki/src/util/index.ts",[],"/Users/linma/try/Senki/src/pages/AlgoSimulate/AlgoBox.tsx",[],"/Users/linma/try/Senki/src/lib/senki/index.js",[],"/Users/linma/try/Senki/src/util/date.ts",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/Tree/index.tsx",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/Sort/index.tsx",["200","201"],"import React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Tag, Input, Button } from \"antd\";\nimport { ControlTrack, useNormalStyles } from \"../../../components\";\nimport { C } from \"../../../util\";\nimport CodeDesc from \"../CodeDesc\";\nimport { Scene, SenkiArray } from \"../../../lib/senki\";\nimport {\n  CodeContext,\n  CodeControl,\n  makeBubbleAlgoSource,\n  // makeMergeAlgoSource,\n  // makeQuickSortAlgoSource,\n  // makeSelectionAlgoSource,\n  // makeShellAlgoSource,\n} from \"../../../lib/algo_desc\";\n// import { Link, useLocation } from \"react-router-dom\";\n// import BreadcrumbNav from \"../BreadcrumbNav\";\n\nlet scene: Scene;\nlet codeControl: CodeControl;\nlet makeAlgoSource = makeBubbleAlgoSource;\nlet fakeCode: string = \"\",\n  desc: string[] = [],\n  realCode: string = \"\";\n\nlet tempTask: () => void | undefined; // 保存断点继续的执行函数\n\nconst SimulateDetail = () => {\n  const classes = useStyles();\n  const { flexRow, flexCol } = useNormalStyles();\n  const [reviseArray, setReviseArray] = useState();\n  // const location = useLocation();\n  const [status, setStatus] = useState<\"stop\" | \"play\" | \"finish\">(\"stop\");\n  const [codeInfo, setCodeInfo] = useState({ line: [-1, -1], desc: -1 });\n\n  const statusRef = useRef(status);\n  statusRef.current = status; // 没办法，为了在闭包函数里引用，只能干这种愚蠢操作。\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const createNewCodeControl = () => {\n    codeControl = new CodeControl(realCode);\n\n    const handleWait = ({ info, resolve }: CodeContext) => {\n      setCodeInfo(info);\n\n      // 确定动画结束了再进行下一步\n      const tryToNext = () => {\n        if (statusRef.current === \"play\") {\n          if (scene.isAnimAllOver()) resolve();\n          else setTimeout(tryToNext, 100);\n        } else tempTask = resolve;\n      };\n\n      setTimeout(tryToNext, 500);\n    };\n\n    const handleEnd = () => {\n      setStatus(\"finish\");\n      setCodeInfo({ line: [-1, -1], desc: -1 });\n    };\n\n    const handleDestroy = () => {\n      scene.removeAllChild();\n    };\n\n    codeControl.on(\"wait\", handleWait);\n    codeControl.on(\"end\", handleEnd);\n    codeControl.on(\"destroy\", handleDestroy);\n\n    codeControl.start();\n  };\n\n  const handlePlay = () => {\n    if (tempTask) tempTask();\n    setStatus(\"play\");\n  };\n\n  const handleRestart = () => {\n    [fakeCode, desc, realCode] = makeAlgoSource(reviseArray);\n    codeControl.destroy(); // 一定要记得销毁\n    createNewCodeControl();\n    setStatus(\"play\");\n  };\n\n  const handleStop = () => {\n    setStatus(\"stop\");\n  };\n\n  const handleNext = () => {\n    if (tempTask) tempTask();\n  };\n\n  const handleChangeSpeed = () => {};\n\n  const reviseArrayInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    try {\n      let data = JSON.parse(event.target.value);\n      setReviseArray(data);\n    } catch (err) {\n      setReviseArray(undefined);\n    }\n  };\n\n  useLayoutEffect(() => {\n    scene = new Scene(canvas.current!);\n    SenkiArray.config.scene = scene;\n    SenkiArray.config.width = scene.width;\n    SenkiArray.config.height = scene.height;\n\n    // let path = location.pathname;\n    makeAlgoSource = makeBubbleAlgoSource;\n    // if (/bubble/.test(path)) makeAlgoSource = makeBubbleAlgoSource;\n    // if (/merge/.test(path)) makeAlgoSource = makeMergeAlgoSource;\n    // if (/quick/.test(path)) makeAlgoSource = makeQuickSortAlgoSource;\n    // if (/selection/.test(path)) makeAlgoSource = makeSelectionAlgoSource;\n    // if (/shell/.test(path)) makeAlgoSource = makeShellAlgoSource;\n\n    [fakeCode, desc, realCode] = makeAlgoSource(reviseArray);\n\n    createNewCodeControl();\n  }, [canvas]);\n\n  return (\n    <div className={C(classes.container, flexCol)}>\n      {/* <BreadcrumbNav /> */}\n      <div className={C(classes.codeBox, flexRow)}>\n        {/* 代码描述 */}\n        <CodeDesc code={fakeCode} desc={desc} info={codeInfo} />\n        {/* 动画展示 */}\n        <canvas ref={canvas} className={classes.canvas}></canvas>\n      </div>\n      <div className={C(classes.operationArea, flexCol)}>\n        <div className={flexRow}>\n          <div className={classes.operationSingleArea}>\n            <div style={{ padding: 24 }}  className={classes.operationPart}>\n              {/* <Link to=\"/simulatedetail/sort/bubble\">\n                <Tag color=\"magenta\">冒泡</Tag>\n              </Link>\n              <Link to=\"/simulatedetail/sort/merge\">\n                <Tag color=\"cyan\">归并</Tag>\n              </Link>\n              <Link to=\"/simulatedetail/sort/quick\">\n                <Tag color=\"geekblue\">快排</Tag>\n              </Link>\n              <Link to=\"/simulatedetail/sort/selection\">\n                <Tag color=\"purple\">选择</Tag>\n              </Link>\n              <Link to=\"/simulatedetail/sort/shell\">\n                <Tag color=\"green\">希尔</Tag>\n              </Link> */}\n            </div>\n          </div>\n          <div className={classes.operationSingleArea}>\n            <div className={classes.operationPart}>\n              <div className={classes.reviseArrayInputButtonBox}>\n                <div className={classes.reviseArrayInput}>\n                  <Input\n                    placeholder=\"输入数组，例：[1,2,3,4,5]\"\n                    onChange={(event) => {\n                      reviseArrayInputChange(event);\n                    }}\n                  />\n                </div>\n                <div>\n                  <Button onClick={handleRestart}>确认</Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <ControlTrack\n          status={status}\n          speed={400}\n          onPlay={handlePlay}\n          onStop={handleStop}\n          onRestart={handleRestart}\n          onChangeSpeed={handleChangeSpeed}\n          onNext={handleNext}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SimulateDetail;\n\nconst useStyles = makeStyles({\n  container: {\n    minHeight: \"calc(100vh - 60px)\",\n  },\n  breadNav: {\n    padding: 13,\n  },\n  codeBox: {\n    flex: 1,\n  },\n  canvas: {\n    flex: 1,\n    marginLeft: 50,\n    marginRight: 50,\n  },\n  operationArea: {\n    margin: 13,\n    height: \"20vh\",\n    backgroundColor: \"#2c303a\",\n  },\n  operationPart: {\n    marginTop: \"1%\",\n    marginBottom: \"1%\",\n    backgroundColor: \"white\",\n    padding: \"20px\",\n    borderRadius: \"5px\",\n  },\n  operationSingleArea: {\n    width: \"48%\",\n    height: \"100%\",\n    padding: \"0.5%\",\n  },\n  operationCode: {\n    backgroundColor: \"white\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n  reviseArrayInputButtonBox: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  reviseArrayInput: {\n    width: \"90%\",\n    marginRight: \"5px\",\n  },\n});\n","/Users/linma/try/Senki/src/components/index.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/index.ts",[],"/Users/linma/try/Senki/src/components/NormalStyle.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/CodeControl.ts",["202"],"import \"../senki/index.js\";\n\nclass MicroEvent<EventType extends string> {\n  _events!: {\n    [key in string]: ((...args: any[]) => void)[];\n  };\n\n  on(event: EventType, fct: (...args: any[]) => void) {\n    this._events = this._events || {};\n    this._events[event] = this._events[event] || [];\n    this._events[event].push(fct);\n  }\n\n  offAll(event: EventType) {\n    this._events = this._events || {};\n    delete this._events[event];\n  }\n\n  off(event: EventType, fct: (...args: any[]) => void) {\n    this._events = this._events || {};\n    if (event in this._events === false) return;\n    let idx = this._events[event].indexOf(fct)\n    if (idx !== -1) this._events[event].splice(idx, 1);\n  }\n\n  emit(event: EventType, ...args: any[]) {\n    this._events = this._events || {};\n    if (event in this._events === false) return;\n    for (var i = 0; i < this._events[event].length; i++)\n      this._events[event][i].apply(this, args);\n  }\n}\n\nconst CodeControlPool: CodeControl[] = [];\n\ntype CodeControlEvent = \"end\" | \"begin\" | \"wait\" | \"error\" | \"destroy\";\n\ntype CodeInfo = { line: number[]; desc: number };\n\nexport type CodeContext = {\n  info: CodeInfo;\n  resolve: (value?: any) => void;\n  reject: (reason?: any) => void;\n};\n\nexport default class CodeControl extends MicroEvent<CodeControlEvent> {\n  static count = 0;\n  executableFunction: () => Promise<void>;\n\n  static saveContext(count: number, context: CodeContext) {\n    const instance = CodeControlPool[count];\n    if (instance) instance.saveCodeContext(context);\n    else {\n      console.warn(\"CodeControl \" + count + \" not Found，try to end the task.\");\n      context?.reject(\"The entity has been deleted.\");\n    }\n  }\n\n  count = CodeControl.count++;\n\n  codeContext?: CodeContext;\n\n  status: \"running\" | \"idle\" | \"error\" = \"idle\";\n\n  _breakpointFunctionDeclaration = `\n  function wait(info) {\n    return new Promise((resolve, reject) => {\n      // console.log(${this.count})\n      CodeControl.saveContext(${this.count}, { info, resolve, reject });\n    });\n  };\n  `;\n\n  constructor(source: string) {\n    super();\n\n    CodeControlPool.push(this);\n\n    this.executableFunction = Function(`\n    ${this._breakpointFunctionDeclaration}\n    return async function () {\n      ${source}\n    };\n    `)();\n  }\n\n  start() {\n    this.emit(\"begin\");\n    this.status = \"running\";\n    this.executableFunction()\n      .catch((err: any) => {\n        this.status = \"error\";\n        this.emit(\"error\", err);\n        throw err\n      })\n      .finally(() => {\n        this.status = \"idle\";\n        this.emit(\"end\");\n      });\n  }\n\n  saveCodeContext(context: CodeContext) {\n    this.codeContext = context;\n    this.emit(\"wait\", context);\n  }\n\n  destroy() {\n    delete CodeControlPool[this.count];\n    this.offAll(\"end\");\n    this.offAll(\"begin\");\n    this.offAll(\"wait\");\n    this.offAll(\"error\");\n    this.emit(\"destroy\");\n    this.offAll(\"destroy\");\n  }\n}\n\n(window as any).CodeControl = CodeControl;\n","/Users/linma/try/Senki/src/lib/algo_desc/tree/redBlackTree.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/tree/minBinaryHeap.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/tree/inorderTraversal.ts",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/BreadcrumbNav.tsx",[],"/Users/linma/try/Senki/src/lib/algo_desc/sort/shell.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/sort/merge.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/sort/selection.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/sort/quick.ts",[],"/Users/linma/try/Senki/src/lib/algo_desc/sort/bubble.ts",[],"/Users/linma/try/Senki/src/components/ControlTrack.tsx",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/CodeDesc.tsx",[],"/Users/linma/try/Senki/src/lib/algo_desc/makeAlgoSource.ts",[],"/Users/linma/try/Senki/src/lib/senki/structure/SenkiLinkedNode.js",[],"/Users/linma/try/Senki/src/lib/senki/base/object.js",[],"/Users/linma/try/Senki/src/lib/senki/structure/SenkiArray.js",[],"/Users/linma/try/Senki/src/lib/senki/base/anim.js",[],"/Users/linma/try/Senki/src/lib/senki/base/scheduler.js",[],"/Users/linma/try/Senki/src/lib/senki/components/Histogram.js",[],"/Users/linma/try/Senki/src/lib/senki/components/ForestPlot.js",[],"/Users/linma/try/Senki/src/lib/senki/base/shape.js",[],"/Users/linma/try/Senki/src/lib/senki/base/util.js",[],"/Users/linma/try/Senki/src/pages/SimulateDetail/Top/index.tsx",["203"],"/Users/linma/try/Senki/src/lib/algo_desc/link/reverse.ts",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":56,"column":16,"nodeType":"210","messageId":"211","endLine":56,"endColumn":23},{"ruleId":"212","severity":1,"message":"213","line":19,"column":13,"nodeType":"214","endLine":19,"endColumn":32},{"ruleId":"215","severity":1,"message":"216","line":1,"column":1,"nodeType":"217","endLine":115,"endColumn":2},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"218","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":13},{"ruleId":"219","severity":1,"message":"220","line":124,"column":6,"nodeType":"221","endLine":124,"endColumn":14,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":79,"column":31,"nodeType":"225","messageId":"226","endLine":84,"endColumn":7},{"ruleId":"219","severity":1,"message":"227","line":128,"column":6,"nodeType":"221","endLine":128,"endColumn":14,"suggestions":"228"},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"@typescript-eslint/no-unused-vars","'setCode' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Tag' is defined but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'reviseArray'. Either include it or remove the dependency array.","ArrayExpression",["231"],"no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","React Hook useLayoutEffect has missing dependencies: 'location.pathname' and 'reviseArray'. Either include them or remove the dependency array.",["232"],"no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [canvas, reviseArray]",{"range":"237","text":"238"},"Update the dependencies array to be: [canvas, location.pathname, reviseArray]",{"range":"239","text":"240"},[3595,3603],"[canvas, reviseArray]",[3667,3675],"[canvas, location.pathname, reviseArray]"]